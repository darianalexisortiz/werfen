{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}
{%
  set classes = [
    'node',
    'node--type-' ~ node.bundle|clean_class,
    node.isPromoted() ? 'node--promoted',
    node.isSticky() ? 'node--sticky',
    not node.isPublished() ? 'node--unpublished',
    view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
  ]
%}
{{ attach_library('classy/node') }}
  {% if view_mode == 'teaser' %}
    <article{{ attributes.addClass(classes) }}>


      {{ title_prefix }}
      {% if label and not page %}
        <h2{{ title_attributes }}>
          {{ label }}
        </h2>
      {% endif %}
      {{ title_suffix }}

      {% if display_submitted %}
        <footer class="node__meta">
          {{ author_picture }}
          <div{{ author_attributes.addClass('node__submitted') }}>
            {% trans %}Submitted by {{ author_name }} on {{ date }}{% endtrans %}
            {{ metadata }}
          </div>
        </footer>
      {% endif %}
      <div{{ content_attributes.addClass('node__content') }}>
        {{ content }}
      </div>
    </article>
    {% else %}

    <div class="swiper-container-c">
      <div class="swiper-wrapper-c">
        <div class="swiper-slide-c">
          <article{{ attributes.addClass(classes) }}>
            {{ title_prefix }}
            {% if label and not page %}
              <h2{{ title_attributes }}>
                {{ label }}
              </h2>
            {% endif %}
            {{ title_suffix }}

            {% if display_submitted %}
              <footer class="node__meta">
                {{ author_picture }}
                <div{{ author_attributes.addClass('node__submitted') }}>
                  {% trans %}Submitted by {{ author_name }} on {{ date }}{% endtrans %}
                  {{ metadata }}
                </div>
              </footer>
            {% endif %}
               <div{{ content_attributes.addClass('node__content') }}>
                 {{ content }}
               </div>
              <a href="">
               <svg width="12.32mm" height="13.617mm" version="1.1" viewBox="0 0 12.32 13.617" xmlns="http://www.w3.org/2000/svg">
                 <g transform="translate(-91.358 -73.323)">
                  <g transform="matrix(.35278 0 0 -.35278 -374.69 96.245)">
                   <g transform="translate(1338.5 64.977)">
                    <path d="m0 0v-31.247" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="1.838"/>
                   </g>
                   <g transform="translate(1328.4 43.839)">
                    <path d="M 0,0 10.109,-10.109 20.219,0" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="1.838"/>
                   </g>
                   <g transform="translate(1322 38.325)">
                    <path d="m0 0v-11.028h33.085v11.028" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="1.838"/>
                   </g>
                  </g>
                 </g>
                </svg>
               </a>

                <div class="backbtn">
                <svg width="80px" height="13.431px" version="1.1" viewBox="0 0 21.167 3.5536" xmlns="http://www.w3.org/2000/svg">
                 <g transform="matrix(.6666 0 0 .6666 -58.953 -17.378)">
                  <g transform="matrix(.35278 0 0 -.35278 -335.6 795.29)">
                   <g transform="translate(1292,2172.9)">
                    <path d="m0 0h-88.479" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="2.126"/>
                   </g>
                   <g transform="translate(1210.3,2179.7)">
                    <path d="m0 0-6.805-6.805 6.805-6.803" fill="none" stroke="#fff" stroke-miterlimit="10" stroke-width="2.126"/>
                   </g>
                  </g>
                 </g>
                </svg>

                Back
                </div>
          </article>
        </div>
      </div>
      <!-- Add Scroll Bar -->
      <div class="swiper-scrollbar"></div>
    </div>

  {% endif %}
